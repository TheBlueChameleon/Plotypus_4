@startuml;

' ---------------------------------------------------------------------------- '

together {
    interface Mutable {
        void resist() = 0;
    }

    interface Validatable {
        ValidationResult validate() const = 0;
    }

    interface Persistable {
        void setPath(const std::filesystem::path& newFile) = 0;

        bool getMakeDirectories() const = 0;
        void setMakeDirectories(bool newMakePaths) = 0;

        bool getOverwrite() const = 0;
        void setOverwrite(bool newOverwrite) = 0;

        std::ofstream getFileStream() const = 0;
        std::ostringstream getStringStream() = 0;
    }

    interface NamedType {
        const std::string& getTypeName() const = 0;
    }

    interface NonAssignable {
        Deletes Copy Constructor and Copy Assignment
    }
}

' ---------------------------------------------------------------------------- '

together {
    interface Scriptable {
        virtual void writeScript(std::ostream& hFile) = 0;
    }
    Scriptable -up-> Mutable
    Scriptable -up-> Validatable
    Scriptable -up-> NamedType

    interface Serializable {}
    Serializable -up-> Persistable
    Serializable -up-> Mutable
    Serializable -up-> Validatable

    interface Fragment {
        virtual std::string generateScriptFragment() const = 0;
    }
    Fragment -up-> Mutable

    interface Collection {
        size_t size() const = 0;
        bool empty() const = 0;

        bool operator=(const Collection<T>& other) = 0;

        size_t add(T* element) = 0;

        void clear() = 0;

        void forEach(std::function<void(T&)> action) = 0;
    }

    Collection *-up- NonAssignable
}

' ---------------------------------------------------------------------------- '

together {
    interface TerminalInfoProvider<T> {
        {static} std::string getDefaultExtension();
        template<TerminalInfoProviderType T> T& as()
    }
    TerminalInfoProvider -up-> Scriptable
    TerminalInfoProvider -up-> Persistable
    TerminalInfoProvider .up.  Fragment : " incorporates"

    interface Sheet {
        void writeScriptHead    (std::ostream& hFile) const = 0;
        void writeScriptData    (std::ostream& hFile, const StylesCollection& stylesCollection) const = 0;
        void writeScriptOverlays(std::ostream& hFile) const = 0;
        void writeScriptFooter  (std::ostream& hFile, const int pageNum) const = 0;
    }
    Sheet -up-> Scriptable
    Sheet -up-> Persistable
}

' ---------------------------------------------------------------------------- '


@enduml;
